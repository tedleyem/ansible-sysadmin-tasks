--- 
- name: Check current RAM usage
  hosts: all
  gather_facts: true

  tasks:         
    - name: Capture Timestamp
      shell: date +"%Y%m%d%H%M%S"
      register: current_date_time

    - debug: 
        msg: "HOST: {{ ansible_inventory_hostname }}"
    - debug: 
        msg: "timestamp: {{ current_date_time }}"
        

    - debug: 
        msg: | 
          hostname :
          --- MEMORY ----
          Used  : {{ ansible_memory_mb.real.used }}
          Free  : {{ ansible_memory_mb.real.free }}
          Total : {{ ansible_memory_mb.real.total }} 
          --- CACHE ----
          Used  : {{ ansible_memory_mb.cache.used }}
          Free  : {{ ansible_memory_mb.cache.free }}
          Total : {{ ansible_memory_mb.cache.total }} 
          --- SWAP ----
          Total : {{ ansible_memory_mb.swap.used }} 
          Total : {{ ansible_memory_mb.swap.free }} 
          Total : {{ ansible_memory_mb.swap.total }} 


            sudo find / -name 'log4j*'



 I made something similar in our org, as a supplemental way to ferret out where log4j may be in-use from the systems point of view. For something this pervasive, no single tool is going to tell you for certain if you are vulnerable.

For shell or command tasks, Ansible considers any nonzero return code as a "failure". If you are running a chain of commands with the shell module (i.e. some_command | grep 'foo'), the return code of the last command in the chain will determine if the task was "successful" or "failed". If you are piping a command output to grep, a result of "no matches found" (rc=1) will be seen by Ansible as a failure.

Two ways to override:

    Add the ignore_errors: True param to the task. This option stinks, because it paints your terminal red and lets "fatal" errors slip through.

    Register the output, and use the failed_when or changed_when params to tune the task failure conditions. This is cleaner than using ignore_errors.

The below task customizes the failure conditions to align with the possible return codes of the grep command at the end (0=found, 1=notfound, 2=error).

- name: Find log4j jar files held open by a process
  shell:
    cmd: lsof -Fn | egrep '.*log4j.*.jar'
  register: lsof_result
  changed_when: lsof_result.rc == 1
  failed_when: lsof_result.rc == 2



